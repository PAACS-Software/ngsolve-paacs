# override default behaviour to embed .dylib files to Macos instead of Frameworks
function(gp_item_default_embedded_path_override item default_embedded_path_var)
  set(path "@executable_path")
  if(APPLE)
    set(path "@loader_path/../../Contents/MacOS")

    # Embed only frameworks (and NOT .dylibs) in the embedded "Frameworks" directory
    if(item MATCHES "[^/]+\\.framework/")
      set(path "@executable_path/../Frameworks")
    endif()
  endif()
  set(${default_embedded_path_var} "${path}" PARENT_SCOPE)
endfunction()

include(BundleUtilities)

function(fixup_bundle1 app libs dirs)
  message(STATUS "fixup_bundle")
  message(STATUS "  app='${app}'")
  message(STATUS "  libs='${libs}'")
  message(STATUS "  dirs='${dirs}'")

  set(options)
  set(oneValueArgs)
  set(multiValueArgs IGNORE_ITEM)
  cmake_parse_arguments(CFG "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN} )

  message(STATUS "  ignoreItems='${CFG_IGNORE_ITEM}'")

  get_bundle_and_executable("${app}" bundle executable valid)
  if(valid)
    get_filename_component(exepath "${executable}" PATH)

    message(STATUS "fixup_bundle: preparing...")
    get_bundle_keys("${app}" "${libs}" "${dirs}" keys IGNORE_ITEM "${CFG_IGNORE_ITEM}")

    # skip fixup of Python3
    list(REMOVE_ITEM keys "python3_8" "Python" "Python3")
    foreach(key "python3_8" "Python" "Python3")
	    message("unset ${key}_COPYFLAG")
	    unset(${key}_COPYFLAG)
	    unset(${key}_DEFAULT_EMBEDDED_PATH)
	    unset(${key}_EMBEDDED_ITEM)
	    unset(${key}_ITEM)
	    unset(${key}_RDEP_RPATHS)
	    unset(${key}_RESOLVED_EMBEDDED_ITEM)
	    unset(${key}_RESOLVED_ITEM)
	    unset(${key}_RPATHS)
    endforeach()

    message(STATUS "fixup_bundle: copying...")
    list(LENGTH keys n)
    math(EXPR n ${n}*2)

    set(i 0)
    foreach(key ${keys})
      math(EXPR i ${i}+1)
      if("${${key}_COPYFLAG}" STREQUAL "2")
        message(STATUS "${i}/${n}: linking '${${key}_RESOLVED_ITEM}' -> '${${key}_RESOLVED_EMBEDDED_ITEM}'")
      elseif(${${key}_COPYFLAG})
        message(STATUS "${i}/${n}: copying '${${key}_RESOLVED_ITEM}'")
      else()
        message(STATUS "${i}/${n}: *NOT* copying '${${key}_RESOLVED_ITEM}'")
      endif()

      set(show_status 1)
      if(show_status)
        message(STATUS "key='${key}'")
        message(STATUS "item='${${key}_ITEM}'")
        message(STATUS "resolved_item='${${key}_RESOLVED_ITEM}'")
        message(STATUS "default_embedded_path='${${key}_DEFAULT_EMBEDDED_PATH}'")
        message(STATUS "embedded_item='${${key}_EMBEDDED_ITEM}'")
        message(STATUS "resolved_embedded_item='${${key}_RESOLVED_EMBEDDED_ITEM}'")
        message(STATUS "copyflag='${${key}_COPYFLAG}'")
        message(STATUS "")
      endif()

      if("${${key}_COPYFLAG}" STREQUAL "2")
        link_resolved_item_into_bundle("${${key}_RESOLVED_ITEM}"
          "${${key}_RESOLVED_EMBEDDED_ITEM}")
      elseif(${${key}_COPYFLAG})
        set(item "${${key}_ITEM}")
        if(item MATCHES "[^/]+\\.framework/")
          copy_resolved_framework_into_bundle("${${key}_RESOLVED_ITEM}"
            "${${key}_RESOLVED_EMBEDDED_ITEM}")
        else()
          copy_resolved_item_into_bundle("${${key}_RESOLVED_ITEM}"
            "${${key}_RESOLVED_EMBEDDED_ITEM}")
        endif()
      endif()
    endforeach()

    message(STATUS "fixup_bundle: fixing...")
    foreach(key ${keys})
      math(EXPR i ${i}+1)
      if(APPLE)
        message(STATUS "${i}/${n}: fixing up '${${key}_RESOLVED_EMBEDDED_ITEM}'")
        if(NOT "${${key}_COPYFLAG}" STREQUAL "2")
          fixup_bundle_item("${${key}_RESOLVED_EMBEDDED_ITEM}" "${exepath}" "${dirs}")
        endif()
      else()
        message(STATUS "${i}/${n}: fix-up not required on this platform '${${key}_RESOLVED_EMBEDDED_ITEM}'")
      endif()
    endforeach()

    message(STATUS "fixup_bundle: cleaning up...")
    clear_bundle_keys(keys)

    message(STATUS "fixup_bundle: verifying...")
    # verify_app("${app}" IGNORE_ITEM "${CFG_IGNORE_ITEM}")
  else()
    message(SEND_ERROR "error: fixup_bundle: not a valid bundle")
  endif()

  message(STATUS "fixup_bundle: done")
endfunction()

get_filename_component(APPNAME @CMAKE_INSTALL_PREFIX@ NAME)
set(APP "${CMAKE_CURRENT_BINARY_DIR}/bundle_dir/${APPNAME}")
set(MACOS_DIR ${APP}/Contents/MacOS)

set(BU_CHMOD_BUNDLE_ITEMS ON)

message("copy @CMAKE_INSTALL_PREFIX@ dir to bundle_dir")
execute_process(COMMAND mkdir bundle_dir)
execute_process(COMMAND cp -r @CMAKE_INSTALL_PREFIX@ bundle_dir)
execute_process(COMMAND ln -s /Applications bundle_dir/Applications)

file(GLOB libs ${MACOS_DIR}/*.dylib ${MACOS_DIR}/*.so)
message("libraries to fix: ${libs}")
fixup_bundle1( ${MACOS_DIR}/netgen "${libs}" "${MACOS_DIR}") # IGNORE_ITEM ${libs})
message("create image")
execute_process(COMMAND hdiutil create -size 200m -volname NGSolve -srcfolder bundle_dir -ov -fs HFS+ -format UDZO NGSolve-@NGSOLVE_VERSION@.dmg)
execute_process(COMMAND otool -L ${MACOS_DIR}/netgen)
message("delete bundle_dir")
execute_process(COMMAND rm -rf bundle_dir)
